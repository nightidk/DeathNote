plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
	id 'architectury-plugin' version '3.4-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

apply plugin: 'dev.architectury.loom'
apply plugin: 'architectury-plugin'

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

architectury {
	minecraft = project.minecraft_version
}

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
	maven { url 'https://maven.blamejared.com' }
	maven {
		name = 'Sponge / Mixin'
		url = 'https://repo.spongepowered.org/repository/maven-public/'
	}
	maven { url = "https://libraries.minecraft.net/" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/"  }
	maven { url = "https://maven.wispforest.io" } // TOP
	maven { url = "https://www.cursemaven.com" }
	maven { url = "https://maven.ladysnake.org/releases" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://maven.vram.io" }
	maven { url = "https://jitpack.io" }
	maven {
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "CurseMaven"
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		name "SquidDev"
		url "https://squiddev.cc/maven"
	}
	maven { url "https://maven.terraformersmc.com/releases" }
	maven {
		name = "Modmuss50"
		url = "https://maven.modmuss50.me/"
	}

//	flatDir { dirs "libraries/embedded" }
}

dependencies {
	compileOnly("com.google.code.findbugs:jsr305:3.0.2")

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
//	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
//
//	// Use the offical mojang mappings
//	mappings loom.officialMojangMappings()

	// Layered mappings using official mojang mappings and parchment.

	mappings loom.layered() {
		mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}")
	modRuntimeOnly "me.lucko:fabric-permissions-api:${project.fabric_permissions_version}"
	modImplementation include("io.github.ladysnake:PlayerAbilityLib:${project.pal_version}")
	modImplementation("appeng:appliedenergistics2-fabric:15.2.0")

	dependencies {

		modImplementation("vazkii.botania:Botania-xplat:1.20.1-444")

		modRuntimeOnly 'curse.maven:reborncore-237903:4708961'
		modRuntimeOnly 'curse.maven:techreborn-233564:4708962'

		def xei = ["jei", "emi"]

		if (xei.remove("jei")) {
			modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}")
		}

//		if (xei.remove("rei")) {
//			modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
//				exclude(group: "net.fabricmc", module: "fabric-loader")
//			}
//		}
//
//		if (xei.remove("emi")) {
//			modRuntimeOnly("dev.emi:emi-fabric:${project.emi_version}")
//		}
//
//		if (!xei.isEmpty()) {
//			throw new GradleException("Unknown xei mods: $xei")
//		}
	}

	include 'com.github.cliftonlabs:json-simple:4.0.1'
	include implementation("net.dv8tion:JDA:${project.jda_version}")  {
		exclude module: "opus-java"
	}
	include 'org.json:json:20240303'
	include 'com.squareup.okio:okio:3.5.0'
	include 'com.squareup.okhttp3:okhttp:5.0.0-alpha.14'
	include 'com.squareup.okio:okio-jvm:3.5.0'
	include "org.apache.commons:commons-collections4:4.4"
	include "org.jetbrains.kotlin:kotlin-stdlib:1.6.21"
	include "com.neovisionaries:nv-websocket-client:2.14"
	include "net.sf.trove4j:trove4j:3.0.3"
	include 'com.fasterxml.jackson.core:jackson-databind:2.13.4.1'
	include "com.fasterxml.jackson.core:jackson-annotations:2.13.1"
	include "com.fasterxml.jackson.core:jackson-core:2.13.1"
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.6")))
}



loom {
	accessWidenerPath = file("src/main/resources/deathnote.accesswidener")

	mixin {
		useLegacyMixinAp = true
	}
}

processResources {
	inputs.property("version", project.version)

	from(project.file("LICENSE"))
	exclude(".cache")

	filesMatching("fabric.mod.json") {
		expand("version": project.version)
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
	main {
		resources {
			srcDir("src/generated/resources")
		}
	}
}

clean {
	delete("src/generated")
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

//shadowJar {
//	archiveClassifier = "${project.minecraft_version}"
//	configurations = [project.configurations.embed]
//	relocate 'org.slf4j', 'dcshadow.org.slf4j'
//}


publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {}
}

configurations.configureEach {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${project.loader_version}")
	}
}